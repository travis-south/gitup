#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Event\ConsoleCommandEvent;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\EventDispatcher\EventDispatcher;
use TravisSouth\Gitup\Console\Command\UpdateCommand;
use TravisSouth\Gitup\Console\Command\AddCommand;
use TravisSouth\Gitup\Console\Command\GetCommand;
use TravisSouth\Gitup\Console\Command\GetAllCommand;
use TravisSouth\Gitup\Console\Command\RemoveCommand;
use TravisSouth\Gitup\Console\ErrorHandler;

require __DIR__.'/../vendor/autoload.php';

ErrorHandler::setUp();

$dispatcher = new EventDispatcher();

$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) {
    // get the output instance
    $output = $event->getOutput();

    // get the command to be executed
    $command = $event->getCommand();

    // write something about the command
    $output->writeln(sprintf('Running <info>%s</info>', $command->getName()));
});


$updateCommand = new UpdateCommand();
$addCommand = new AddCommand();
$getCommand = new GetCommand();
$getAllCommand = new GetAllCommand();
$removeCommand = new RemoveCommand();

$application = new Application('Gitup', '@package_version@');
$application->setDispatcher($dispatcher);
$application->add($updateCommand);
$application->add($addCommand);
$application->add($getCommand);
$application->add($getAllCommand);
$application->add($removeCommand);

$application->run();
